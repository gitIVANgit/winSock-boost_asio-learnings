#include <istream>
#include <sstream>
#include <fstream>
#include <streambuf>
#include <vector>
#include <iostream>
#include <iterator>
#include "WebServer.h"
using namespace std;
void WebServer::onMessageReceived1(int clientSocket, const char* msg, int length)
{
	istringstream iss(msg);
	vector <string> tokens;

	string intermediate;
	int t = 0;
	while (getline(iss, intermediate, ' '))
	{
		tokens.push_back(intermediate);
		t++;
	}

	std::string content = "<h1>404 Not Found</h1>";
	std::string htmlFile = "/index.html";
	int errorCode = 404;

	if (t >= 3 && tokens[0] == "GET")
	{
		htmlFile = tokens[1];

		cout << htmlFile;
		if (htmlFile == "/")
		{
			htmlFile = "/index.html";
		}
	}

	std::ifstream f(".\\wwwroot" + htmlFile);

	if (f.good())
	{
		ostringstream isss;
		string line;

		while (std::getline(f, line))
		{
			isss << line;

		}
		content = isss.str();
		cout << "SEND:\n\n"<<content;
		errorCode = 200;
	}
	string type = "html";
	if (content.find("html")!=-1 ){
type="html";
	}
	else {
		type = "css";
	}
	cout << "TYPE SEND:\n\n" << type<<endl << endl;



	f.close();

	std::ostringstream oss;
	oss << "HTTP/1.1 " << errorCode << " OK\r\n";
	oss << "Cache-Control: no-cache, private\r\n";
	oss << "Content-Type: text/"<< type << "\r\n";
	oss << "Content-Length: " << content.size() << "\r\n";
	oss << "\r\n";
	oss << content;
	std::string output = oss.str();
	int size = output.size() + 1;
	cout << " SEND ALL:\n\n" <<  output<< endl << endl;

	send(clientSocket, output.c_str(), size, 0);

}

int WebServer::run1()
{
	bool running = true;

	while (running)
	{
		

		fd_set copy = m_master1;

		int socketCount = select(0, &copy, nullptr, nullptr, nullptr);

		for (int i = 0; i < socketCount; i++)
		{
			SOCKET sock = copy.fd_array[i];

			if (sock == m_socket1)
			{
				SOCKET client = accept(m_socket1, nullptr, nullptr);

				FD_SET(client, &m_master1);

			}
			else
			{
				char buf[4096];
				ZeroMemory(buf, 4096);

				int bytesIn = recv(sock, buf, 4096, 0);
				cout<<"REQUESTING :" << buf << endl << endl;
				if (bytesIn <= 0)
				{
					closesocket(sock);
					FD_CLR(sock, &m_master1);
				}
				else
				{
					onMessageReceived1(sock, buf, bytesIn);
				}
			}
		}
	}

	
	FD_CLR(m_socket1, &m_master1);
	closesocket(m_socket1);

	while (m_master1.fd_count > 0)
	{
		SOCKET sock = m_master1.fd_array[0];

		FD_CLR(sock, &m_master1);
		closesocket(sock);
	}

	WSACleanup();
	return 0;
}
int WebServer::init1()
{
	WSADATA wsData;
	WORD ver = MAKEWORD(2, 2);

	int wsOk = WSAStartup(ver, &wsData);
	if (wsOk != 0)
	{
		return wsOk;
	}

	m_socket1 = socket(AF_INET, SOCK_STREAM, 0);
	if (m_socket1 == INVALID_SOCKET)
	{
		return WSAGetLastError();
	}

	sockaddr_in hint;
	hint.sin_family = AF_INET;
	hint.sin_port = htons(m_port1);
	hint.sin_addr.s_addr = INADDR_ANY;

	if (bind(m_socket1, (sockaddr*)&hint, sizeof(hint)) == SOCKET_ERROR)
	{
		return WSAGetLastError();
	}

	if (listen(m_socket1, SOMAXCONN) == SOCKET_ERROR)
	{
		return WSAGetLastError();
	}
	FD_ZERO(&m_master1);


	FD_SET(m_socket1, &m_master1);

	return 0;
}
