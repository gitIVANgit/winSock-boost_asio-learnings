#include <iostream>
#include <boost\asio.hpp>
#include <sstream>
#include <thread>
boost::asio::streambuf streamBuf;

void foo(boost::asio::ip::tcp::socket &sock) {
	boost::asio::async_read_until(sock, streamBuf, "\n", [&sock]
	(boost::system::error_code ec, size_t bytesTransferred) {
			if (ec)
				return;
			std::cout << bytesTransferred;
			std::cout << "===============================================================\n";
			std::istream is(&streamBuf);
			std::string line;
			std::getline(is, line);
			std::cout << line << "\n";
			std::cout << "===============================================================\n";

		foo(sock);
		}
	);

}

int main()
{
		boost::asio::io_context ioContext;
		boost::asio::ip::tcp::resolver resolver(ioContext);
		boost::asio::ip::tcp::resolver::results_type endpoint = resolver.resolve("127.0.0.1", "99");

		boost::asio::ip::tcp::socket sock(ioContext);
		boost::asio::connect(sock, endpoint);
	
		foo(sock);
		
		ioContext.run();

	
}
