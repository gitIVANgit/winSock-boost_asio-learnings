#include <iostream>

#include <optional>
#include <boost\asio.hpp>
#include <thread>
#include <vector>
#include <unordered_set>
#include <future>

class Server {
public:
	Server() : acceptor(ioContext, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), 99)), sock(ioContext) {
		acceptor.accept(sock);
		std::cout << "accepted\n";
		auto aa = std::async(&Server::startWriting, this);
		auto a = std::async(&Server::startReading, this);


	}
	void startReading() {
		boost::asio::streambuf streamBuf;
		boost::asio::read_until(sock, streamBuf, "\n");
		std::istream is(&streamBuf);
		std::string line;
		std::getline(is, line);
		std::cout << line << "\n";
		startReading();
	}
	void startWriting() {
		std::string msg;
		std::cin >> msg;
		boost::asio::write(sock, boost::asio::buffer(msg+"\n"));
		startWriting();
	}
private:
	boost::asio::io_context ioContext;
	boost::asio::ip::tcp::acceptor acceptor;
	boost::asio::ip::tcp::socket sock;
};
int main()
{
	Server a;
	return 0;

}
