#include <iostream>

#include <optional>
#include <boost\asio.hpp>
#include <thread>
#include <vector>
#include <unordered_set>
#include <future>
void f() {

}
class Server {
public:
	Server() : acceptor(ioContext, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), 99)),sock(ioContext) {
		acceptor.async_accept(sock, [this](const boost::system::error_code& error) {
			startReading();
			});
		ioContext.run();
	}
	void startReading() {
		boost::asio::streambuf streamBuf;
		boost::asio::read_until(sock, streamBuf, "\n");
		std::istream is(&streamBuf);
		std::string line;
		std::getline(is, line);
		std::cout << line << "\n";
	}
private:
	boost::asio::io_context ioContext;
	boost::asio::ip::tcp::acceptor acceptor;
	boost::asio::ip::tcp::socket sock;
};
int main()
{
	Server a;
	return 0;

}
