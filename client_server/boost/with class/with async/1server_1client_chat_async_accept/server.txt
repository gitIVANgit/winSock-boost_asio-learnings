#include <iostream>

#include <optional>
#include <boost\asio.hpp>
#include <thread>
#include <vector>
#include <unordered_set>
#include <future>
void f() {

}
class Server {
public:
	Server() : acceptor(ioContext, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), 99)),sock(ioContext) {
	}
	void start() {
		acceptor.async_accept(sock, [this](const boost::system::error_code& error) {
			startReading();
			});
		ioContext.run();
	}
	 void startWriting() {
		std::string str;
		std::cin >> str;
		boost::asio::write(sock, boost::asio::buffer((str + "\n").c_str(), str.size() + 1));
		std::cout << "sended";
		startWriting();
	}
	void startReading() {
		boost::asio::streambuf streamBuf;
		boost::asio::read_until(sock, streamBuf, "\n");
		std::istream is(&streamBuf);
		std::string line;
		std::getline(is, line);
		std::cout << line << "\n";
		startReading();
	}
private:
	boost::asio::io_context ioContext;
	boost::asio::ip::tcp::acceptor acceptor;
	 boost::asio::ip::tcp::socket sock;
};
int main()
{
	Server a;
	std::thread t{ [&a]() { a.startWriting(); } };

	a.start();
	t.join();
	return 0;

}
